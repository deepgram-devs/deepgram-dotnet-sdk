namespace Deepgram.Tests.UtilitiesTests;

public class QueryParameterUtilTests
{
    readonly PrerecordedTranscriptionOptions _prerecordedTranscriptionOptions;

    public QueryParameterUtilTests()
    {
        _prerecordedTranscriptionOptions = new PrerecordedTranscriptionOptionsFaker().Generate();

    }

    [Fact]
    public void GetParameters_Should_Return_String_When_Passing_String_Parameter()
    {
        //Act
        var result = QueryParameterUtil.GetParameters(_prerecordedTranscriptionOptions)!;

        //Assert
        Assert.NotNull(result);
#pragma warning disable CS8602 // Dereference of a possibly null reference.
        Assert.Contains($"{nameof(_prerecordedTranscriptionOptions.Model).ToLower()}={_prerecordedTranscriptionOptions.Model.ToLower()}", result);
#pragma warning restore CS8602 // Dereference of a possibly null reference.
    }
    [Fact]
    public void GetParameters_Should_Return_String_When_Passing_Int_Parameter()
    {
        //Arrange 
        var obj = new AutoFaker<ListAllRequestsOptions>().Generate();

        //Act
        var result = QueryParameterUtil.GetParameters(obj);

        //Assert
        Assert.NotNull(result);
        Assert.Contains($"{nameof(obj.Limit).ToLower()}={obj.Limit}", result);
    }

    [Fact]
    public void GetParameters_Should_Return_String_When_Passing_Array_Parameter()
    {
        //Arrange
        //need to manual assign this as bogus can put phrase in as words
        _prerecordedTranscriptionOptions.Keywords = new string[] { "test" };

        //Act
        var result = QueryParameterUtil.GetParameters(_prerecordedTranscriptionOptions);

        //Assert
        Assert.NotNull(result);
        Assert.Contains($"keywords={_prerecordedTranscriptionOptions.Keywords[0].ToLower()}", result);

    }

    [Fact]
    public void GetParameters_Should_Return_String_When_Passing_Decimal_Parameter()
    {
        //Act
        // need to set manual as the precison can be very long and gets trimmed from autogenerated value
        _prerecordedTranscriptionOptions.UtteranceSplit = (decimal)2.3;
        var result = QueryParameterUtil.GetParameters(_prerecordedTranscriptionOptions);

        //Assert
        Assert.NotNull(result);
        Assert.Contains($"utt_split={_prerecordedTranscriptionOptions.UtteranceSplit}", result);
    }

    [Fact]
    public void GetParameters_Should_Return_String_When_Passing_Boolean_Parameter()
    {
        //Arrange 
        var obj = new AutoFaker<PrerecordedTranscriptionOptions>().Generate();

        //Act
        var result = QueryParameterUtil.GetParameters(obj);

        //Assert
        Assert.NotNull(result);
        Assert.Contains($"{nameof(obj.Paragraphs).ToLower()}={obj.Paragraphs.ToString()?.ToLower()}", result);
    }

    [Fact]
    public void GetParameters_Should_Return_String_When_Passing_DateTime_Parameter()
    {
        //Arrange 
#pragma warning disable CS8629 // Nullable value type may be null.
        var date = new AutoFaker<ListAllRequestsOptions>().Generate()
            .StartDateTime.Value.ToString("yyyy-MM-dd");
#pragma warning restore CS8629 // Nullable value type may be null.

        //Act
        var result = QueryParameterUtil.GetParameters(new AutoFaker<ListAllRequestsOptions>().Generate());

        //Assert
        Assert.NotNull(result);
        Assert.Contains($"start={date}", result);
    }

    [Fact]
    public void GetParameters_Should_Return_Empty_String_When_Parameter_Has_No_Values()
    {
        //Arrange 
        var obj = new PrerecordedTranscriptionOptions();

        //Act
        var result = QueryParameterUtil.GetParameters(obj);

        //Assert
        Assert.NotNull(result);
        Assert.Equal(string.Empty, result);
    }
}